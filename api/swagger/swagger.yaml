openapi: "3.0.0"

info:
  version: 1.0.0
  title: Backend Servicios

servers:
  - url: http://localhost:3000/api/v1

components:
  schemas:
    roles:
      type: array
      items: 
        oneOf:
          - $ref: '#/components/schemas/role'
    role:
      type: object
      properties:
        name:
          type: string
    roleNewOrUpdated:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string    
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time    
    user:
      type: object
      properties:
        username:
          type: string
          format: mail
        password:
          type: string    
    userWithToken:
      type: object
      properties:
        token:
          type: string
        user:
          type: object
          properties:
            id:
              type: integer
              format: int64
            phoneNumber:
              type: integer
            name:
              type: string
            mail:
              type: string            
            password:
              type: string
              format: empty
            Role:
              type: object
              properties:
                name:
                  type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "token to receive any endpoint send: Bearer space token "
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid 
    InvalidParameterError:
      description: Any error with parameter or no exist reference

security:
  - bearerAuth: []  

paths:
  /auth/login:
    post:
      summary: Login user to system
      tags: 
        - Login
      security: []
      # parameters:
      #   - name: id
      #     in: query
      #     description: id de la mascota
      #     required: true
      #     schema:
      #       type: number
      requestBody:
        description: Data to login user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'          
      responses:
        '200':
          description: A data user with token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userWithToken'
        # '400':
        #   description: Request not found
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        #         example: { msg: error }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /role:
    get:
      summary: Roles exist in a system
      tags: 
        - List of roles
      security:
        - bearerAuth: []      
      responses:
        '200':
          description: List roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles'
        # '400':
        #   description: Request not found
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        #         example: { msg: error }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Insert new Role
      tags: 
        - Insert new role
      requestBody:
        description: Data to add new role
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'    
      security:
        - bearerAuth: []
      responses:
        '200':
          description: New role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleNewOrUpdated'
        '400':
          $ref: '#/components/responses/InvalidParameterError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'         
  /role/{roleId}:
    put:
      summary: Update role
      tags: 
        - Update exist role
      parameters:
        - name: roleId
          in: path
          description: Id role a actualizar
          required: true
          schema:
            type: integer
      requestBody:
        description: Data to update role
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'    
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Role updatedd
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleNewOrUpdated'
        '400':
          $ref: '#/components/responses/InvalidParameterError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'  